import heapq

GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance

def is_goal(state):
    return state == GOAL_STATE

def get_neighbors(state):
    neighbors = []
    x, y = [(i, row.index(0)) for i, row in enumerate(state) if 0 in row][0]
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def serialize(state):
    return tuple(tuple(row) for row in state)

def a_star(start_state):
    heap = []
    heapq.heappush(heap, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()
    while heap:
        f, g, current, path = heapq.heappop(heap)
        if serialize(current) in visited:
            continue
        visited.add(serialize(current))
        if is_goal(current):
            return path + [current]
        for neighbor in get_neighbors(current):
            if serialize(neighbor) not in visited:
                new_path = path + [current]
                heapq.heappush(heap, (g + 1 + manhattan_distance(neighbor), g + 1, neighbor, new_path))
    return None

def print_path(path):
    for step in path:
        for row in step:
            print(row)
        print()

start = [[1, 2, 3],
         [4, 0, 6],
         [7, 5, 8]]

solution = a_star(start)
if solution:
    print_path(solution)
else:
    print("No solution found.")
